/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PausableInterface extends ethers.utils.Interface {
  functions: {
    "paused()": FunctionFragment;
    "stopEverything()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stopEverything",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stopEverything",
    data: BytesLike
  ): Result;

  events: {
    "Open(address)": EventFragment;
    "Paused(address)": EventFragment;
    "Shutdown(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Shutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class Pausable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PausableInterface;

  functions: {
    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    stopEverything(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "stopEverything()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;
  };

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  stopEverything(overrides?: CallOverrides): Promise<boolean>;

  "stopEverything()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    stopEverything(overrides?: CallOverrides): Promise<boolean>;

    "stopEverything()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    Open(account: null): EventFilter;

    Paused(account: null): EventFilter;

    Shutdown(account: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    stopEverything(overrides?: CallOverrides): Promise<BigNumber>;

    "stopEverything()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopEverything(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopEverything()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
